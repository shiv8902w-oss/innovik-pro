<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Virtual Try-On - MSME Digital Marketplace</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .background-pattern {
            background-color: #f0fdf4; /* A very light green from Tailwind's green-50 */
        }
        .upload-box {
            border: 2px dashed #99d8b3;
        }
        .upload-box.dragging {
            border-color: #16a34a;
            background-color: #dcfce7;
        }
        /* Simple spinner */
        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            width: 36px;
            height: 36px;
            border-radius: 50%;
            border-left-color: #10b981;
            animation: spin 1s ease infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="background-pattern">

    <div class="max-w-7xl mx-auto p-4 sm:p-6 lg:p-8">
        <div class="mb-8">
            <a href="/views/userhomepage" class="inline-flex items-center text-green-700 hover:text-green-900 group">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2 transition-transform group-hover:-translate-x-1"><line x1="19" y1="12" x2="5" y2="12"/><polyline points="12 19 5 12 12 5"/></svg>
                Back to Markets
            </a>
        </div>

        <div class="text-center mb-12">
            <h1 class="text-4xl sm:text-5xl font-extrabold text-green-800">
                AI-Powered Virtual Try-On
            </h1>
            <p class="mt-3 max-w-2xl mx-auto text-lg text-green-700">
                Upload your photo and let AI help you visualize how clothes look on you
            </p>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Left Panel: User Input -->
            <div class="bg-white p-8 rounded-xl shadow-lg border border-gray-200/50">
                <h2 class="text-2xl font-bold text-green-900">Your Details</h2>
                <p class="text-gray-600 mt-1">Upload your photo and provide details for personalized recommendations</p>
                
                <form id="try-on-form" class="mt-6 space-y-6">
                    <div>
                        <label for="photo-upload" class="block text-sm font-medium text-gray-700">Upload Your Photo</label>
                        <div id="upload-box" class="mt-2 flex justify-center items-center w-full h-64 rounded-lg upload-box bg-gray-50/50 hover:bg-gray-100/60 transition-colors cursor-pointer relative">
                            <div id="upload-prompt" class="text-center text-gray-500">
                                <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="mx-auto text-gray-400"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="17 8 12 3 7 8"/><line x1="12" y1="3" x2="12" y2="15"/></svg>
                                <p class="mt-2">Click to upload your photo</p>
                                <p class="text-xs">PNG, JPG, or WEBP</p>
                            </div>
                            <img id="image-preview" src="" alt="Image preview" class="hidden w-full h-full object-contain rounded-lg"/>
                        </div>
                        <input id="photo-upload" name="photo-upload" type="file" class="sr-only" accept="image/png, image/jpeg, image/webp">
                    </div>

                    <div>
                        <label for="description" class="block text-sm font-medium text-gray-700">Clothing Description</label>
                        <textarea id="description" name="description" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 sm:text-sm" placeholder="E.g., Traditional red silk saree with golden border"></textarea>
                    </div>

                    <div>
                        <button type="submit" id="generate-btn" class="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                            Generate Virtual Try-On
                        </button>
                    </div>
                </form>
            </div>

            <!-- Right Panel: Result -->
            <div class="bg-white p-8 rounded-xl shadow-lg border border-gray-200/50">
                 <h2 class="text-2xl font-bold text-green-900">Result</h2>
                <p class="text-gray-600 mt-1">Your AI-generated virtual try-on will appear here</p>

                <div id="result-box" class="mt-6 flex justify-center items-center w-full h-[28rem] rounded-lg border-2 border-dashed border-gray-300 bg-gray-50/50">
                    <div id="result-placeholder" class="text-center text-gray-500">
                        <p>Your virtual try-on will appear here</p>
                    </div>
                    <div id="loading-spinner" class="hidden">
                        <div class="spinner"></div>
                        <p class="mt-3 text-gray-600">Generating your try-on...</p>
                    </div>
                    <img id="result-image" src="" alt="Generated try-on image" class="hidden w-full h-full object-contain rounded-lg"/>
                </div>
            </div>
        </div>
    </div>
    
    <script type="module">
        const uploadBox = document.getElementById('upload-box');
        const fileInput = document.getElementById('photo-upload');
        const uploadPrompt = document.getElementById('upload-prompt');
        const imagePreview = document.getElementById('image-preview');
        const descriptionInput = document.getElementById('description');
        const form = document.getElementById('try-on-form');
        const generateBtn = document.getElementById('generate-btn');
        const resultBox = document.getElementById('result-box');
        const resultPlaceholder = document.getElementById('result-placeholder');
        const loadingSpinner = document.getElementById('loading-spinner');
        const resultImage = document.getElementById('result-image');
        let uploadedFile = null;

        // Handle clicking the upload box
        uploadBox.addEventListener('click', () => fileInput.click());

        // Handle file selection
        fileInput.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (file) {
                uploadedFile = file;
                const reader = new FileReader();
                reader.onload = (e) => {
                    imagePreview.src = e.target.result;
                    imagePreview.classList.remove('hidden');
                    uploadPrompt.classList.add('hidden');
                };
                reader.readAsDataURL(file);
            }
        });

        // Drag and drop functionality
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            uploadBox.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        uploadBox.addEventListener('dragenter', () => uploadBox.classList.add('dragging'));
        uploadBox.addEventListener('dragleave', () => uploadBox.classList.remove('dragging'));
        uploadBox.addEventListener('drop', (e) => {
            uploadBox.classList.remove('dragging');
            const dt = e.dataTransfer;
            const file = dt.files[0];
            fileInput.files = dt.files; // Assign dropped file to input
            fileInput.dispatchEvent(new Event('change'));
        });

        // Handle form submission
        form.addEventListener('submit', async (event) => {
            event.preventDefault();
            
            if (!uploadedFile || !descriptionInput.value) {
                alert('Please upload a photo and provide a description.');
                return;
            }

            // Show loading state
            generateBtn.disabled = true;
            generateBtn.textContent = 'Generating...';
            resultPlaceholder.classList.add('hidden');
            resultImage.classList.add('hidden');
            loadingSpinner.classList.remove('hidden');

            try {
                // Convert file to base64
                const base64ImageData = await toBase64(uploadedFile);

                const userPrompt = `Based on the person in the provided image, show them wearing the following: ${descriptionInput.value}.`;
                
                // --- Gemini API Call ---
                const apiKey = ""; // Leave as-is, it will be handled by the environment
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-image-preview:generateContent?key=${apiKey}`;

                const payload = {
                    contents: [{
                        parts: [
                            { text: userPrompt },
                            {
                                inlineData: {
                                    mimeType: uploadedFile.type,
                                    data: base64ImageData
                                }
                            }
                        ]
                    }],
                    generationConfig: {
                        responseModalities: ['IMAGE']
                    },
                };

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                
                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(`API Error: ${error.error?.message || 'Unknown error'}`);
                }

                const result = await response.json();
                const base64Data = result?.candidates?.[0]?.content?.parts?.find(p => p.inlineData)?.inlineData?.data;

                if (!base64Data) {
                    throw new Error("No image data returned from the API.");
                }

                const imageUrl = `data:image/png;base64,${base64Data}`;
                resultImage.src = imageUrl;
                resultImage.classList.remove('hidden');

            } catch (error) {
                console.error('Error generating try-on:', error);
                resultPlaceholder.classList.remove('hidden');
                resultPlaceholder.innerHTML = `<p class="text-red-500">Failed to generate try-on. Please try again.</p><p class="text-xs text-gray-500 mt-2">${error.message}</p>`;
            } finally {
                // Reset UI
                loadingSpinner.classList.add('hidden');
                generateBtn.disabled = false;
                generateBtn.textContent = 'Generate Virtual Try-On';
            }
        });

        // Helper to convert a file to a base64 string
        const toBase64 = file => new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = () => resolve(reader.result.split(',')[1]); // Remove the data URI prefix
            reader.onerror = error => reject(error);
        });

    </script>
</body>
</html>
